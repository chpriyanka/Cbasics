note:
function-it takes the parameters and return the result
func declaration-Function-return_type function_name( parameter list );
func definition-actual body of func(set of statements)
Defining a Function-return_type function_name( parameter list ) {
   body of the function
}
return type-its the data type of the value that a func returns
func name-actual name of the func
parameter-is the placeholder,when the func is appealed a value is passed to the parameter which is called actual parameter or ARGUMENT
function body-has set of statements(defines the task of a func)
func declaration-it tells the compiler about func name and how to call a func
calling a func-when a program calls a func,the program controller goes to the func and proceed with it once the func is executed program control goes back to the main program and continues.
While calling a function, we call it using the function name. If we have any parameters, then we pass them.

Formal parameters are parameters in the function definition.
Actual parameters are parameters in the function call.

2 ways of passing arguments while callig a func are:
1.call by value-copying the values of the argument to the formal parAmeter of the func,when the value of the formal parameter is changed inside the func the actual value of the argument is not changed

2.call by reference-the address of the argument is copied into the formal parameter,so if the value of the argument is changed in the func then the actual value of the argument is changed
and pointers are used to get the address of the argument
